### **1️⃣ Arrays → Two Sum**
**Problem 1:**  
Find two numbers that add up to a target.

**Java**

import java.util.*;
public class two_sum {
    public static int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement))
                return new int[]{map.get(complement), i};
            map.put(nums[i], i);
        }
        return new int[]{};
    }
    public static void main(String[] args) {
        int[] res = twoSum(new int[]{2,7,11,15}, 9);
        System.out.println(Arrays.toString(res));
    }
}

**Problem 2:**
Longest Substring Without Repeating Characters

**Java**

import java.util.*;
class longest_substring {
    public static int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int left = 0, max = 0;
        for (int right = 0; right < s.length(); right++) {
            while (set.contains(s.charAt(right)))
                set.remove(s.charAt(left++));
            set.add(s.charAt(right));
            max = Math.max(max, right - left + 1);
        }
        return max;
    }
    public static void main(String[] args) {
        System.out.println(lengthOfLongestSubstring("abcabcbb"));
    }
}

**Problem 3:**
Recursion → All Permutations of a String

**java**

class permutations {
    static void permute(String s, String ans) {
        if (s.length() == 0) {
            System.out.println(ans);
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            String rest = s.substring(0, i) + s.substring(i + 1);
            permute(rest, ans + ch);
        }
    }
    public static void main(String[] args) {
        permute("ABC", "");
    }
}


**Problem 4:**
Matrix → Rotate a Matrix 90° Clockwise

**JAVA**

public class rotate_matrix {
    public static void rotate(int[][] matrix) {
        int n = matrix.length;
        // Transpose
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        // Reverse each row
        for (int i = 0; i < n; i++) {
            for (int j = 0, k = n - 1; j < k; j++, k--) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][k];
                matrix[i][k] = temp;
            }
        }
    }

    public static void main(String[] args) {
        int[][] mat = {{1,2,3},{4,5,6},{7,8,9}};
        rotate(mat);
        for (int[] row : mat) {
            for (int num : row)
                System.out.print(num + " ");
            System.out.println();
        }
    }
}


**Problem 5:**
Dynamic Programming → Longest Common Subsequence (LCS)

**JAVA**

public class longest_common_subsequence {
    public static int lcs(String X, String Y) {
        int m = X.length(), n = Y.length();
        int[][] dp = new int[m+1][n+1];

        for (int i=1; i<=m; i++) {
            for (int j=1; j<=n; j++) {
                if (X.charAt(i-1) == Y.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m][n];
    }

    public static void main(String[] args) {
        String X = "AGGTAB", Y = "GXTXAYB";
        System.out.println("Length of LCS: " + lcs(X, Y));
    }
}


**Problem 6:**
Graph → Depth First Search (DFS) Traversal

**JAVA**

import java.util.*;

public class dfs_traversal {
    static void dfs(int v, boolean[] visited, List<List<Integer>> adj) {
        visited[v] = true;
        System.out.print(v + " ");
        for (int n : adj.get(v))
            if (!visited[n])
                dfs(n, visited, adj);
    }

    public static void main(String[] args) {
        int V = 5;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i=0; i<V; i++) adj.add(new ArrayList<>());
        
        adj.get(0).addAll(Arrays.asList(1, 2));
        adj.get(1).add(3);
        adj.get(2).add(4);

        boolean[] visited = new boolean[V];
        System.out.print("DFS Traversal: ");
        dfs(0, visited, adj);
    }
}
