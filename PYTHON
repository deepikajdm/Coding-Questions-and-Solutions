### **1️⃣ Arrays → Two Sum**
**Problem 1:**  
Find two numbers that add up to a target.

**Python**

def two_sum(nums, target):
    lookup = {}
    for i, n in enumerate(nums):
        diff = target - n
        if diff in lookup:
            return [lookup[diff], i]
        lookup[n] = i
    return []

print(two_sum([2,7,11,15], 9))

**Problem 2:**
Strings → Longest Substring Without Repeating Characters

**Python**

def longest_substring(s):
    seen = set()
    l = 0
    res = 0
    for r in range(len(s)):
        while s[r] in seen:
            seen.remove(s[l])
            l += 1
        seen.add(s[r])
        res = max(res, r - l + 1)
    return res

print(longest_substring("abcabcbb"))

**problem 3:**
Recursion → All Permutations of a String

**Python**

def permute(s, ans=""):
    if not s:
        print(ans)
        return
    for i in range(len(s)):
        permute(s[:i] + s[i+1:], ans + s[i])

permute("ABC")


**Problem 4:**
Matrix → Rotate a Matrix 90° Clockwise

**Python**

def rotate(matrix):
    n = len(matrix)
    # Transpose
    for i in range(n):
        for j in range(i, n):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
    # Reverse rows
    for i in range(n):
        matrix[i].reverse()

mat = [[1,2,3],[4,5,6],[7,8,9]]
rotate(mat)
for row in mat:
    print(row)


**Problem 5:**
Dynamic Programming → Longest Common Subsequence (LCS)

**Python**

def lcs(X, Y):
    m, n = len(X), len(Y)
    dp = [[0]*(n+1) for _ in range(m+1)]
    for i in range(1, m+1):
        for j in range(1, n+1):
            if X[i-1] == Y[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    return dp[m][n]

print("Length of LCS:", lcs("AGGTAB", "GXTXAYB"))


**Problem 6:**
Graph → Depth First Search (DFS) Traversal

**Python*

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start, end=" ")
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

graph = {
    0: [1, 2],
    1: [3],
    2: [4],
    3: [],
    4: []
}
print("DFS Traversal:", end=" ")
dfs(graph, 0)
